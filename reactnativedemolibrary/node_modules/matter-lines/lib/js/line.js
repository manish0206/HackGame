"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Line = function () {
  function Line() {
    var defaultPoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var lineWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
    var miterLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;

    _classCallCheck(this, Line);

    this.points = defaultPoints;
    this.outsidePoints = [];
    this.insidePoints = [];
    this.lineWidth = lineWidth;
    this.miterLimit = miterLimit;

    if (this.points.length > 0) {
      this.calculatePoints();
    }
  }

  _createClass(Line, [{
    key: "clear",
    value: function clear() {
      this.points = [];
      this.outsidePoints = [];
      this.insidePoints = [];
    }
  }, {
    key: "addPoint",
    value: function addPoint(point) {
      this.points.push(point);
      this.calculatePoints();
    }
  }, {
    key: "calculatePoints",
    value: function calculatePoints() {
      this.outsidePoints = [];
      this.insidePoints = [];
      if (this.points.length <= 1) return;
      for (var index = 0; index < this.points.length; index++) {
        if (index === 0) {
          this.calculateFirstPoint(index);
        } else if (index === this.points.length - 1) {
          this.calculateLastPoint(index);
        } else {
          this.calculateMiddlePoint(index);
        }
      }
    }
  }, {
    key: "calculateFirstPoint",
    value: function calculateFirstPoint(index) {
      var point = this.points[index];
      var afterPoint = this.points[index + 1];
      var rad = Math.atan2(afterPoint.y - point.y, afterPoint.x - point.x) - Math.PI / 2;
      var sin = Math.sin(rad) * this.lineWidth;
      var cos = Math.cos(rad) * this.lineWidth;
      this.outsidePoints.push({ x: point.x + cos, y: point.y + sin });
      this.insidePoints.push({ x: point.x - cos, y: point.y - sin });
    }
  }, {
    key: "calculateLastPoint",
    value: function calculateLastPoint(index) {
      var point = this.points[index];
      var beforePoint = this.points[index];
      var rad = Math.atan2(this.points[index - 1].y - point.y, this.points[index - 1].x - point.x) + Math.PI / 2;
      var sin = Math.sin(rad) * this.lineWidth;
      var cos = Math.cos(rad) * this.lineWidth;
      this.outsidePoints.push({ x: point.x + cos, y: point.y + sin });
      this.insidePoints.push({ x: point.x - cos, y: point.y - sin });
    }
  }, {
    key: "calculateMiddlePoint",
    value: function calculateMiddlePoint(index) {
      var point = this.points[index];
      var rad1 = Math.atan2(this.points[index - 1].y - point.y, this.points[index - 1].x - point.x);
      var rad2 = Math.atan2(this.points[index + 1].y - point.y, this.points[index + 1].x - point.x);
      // rad1 = 0° にした、二等分線になっている
      var rad = (rad2 - rad1) / 2;
      var x = Math.cos(rad) * this.lineWidth / Math.sin(rad);
      var y = this.lineWidth;
      var distance = getDistance({ x: 0, y: 0 }, { x: x, y: y });
      // 回転移動させる
      var rx = x * Math.cos(rad1) - y * Math.sin(rad1);
      var ry = x * Math.sin(rad1) + y * Math.cos(rad1);
      rad1 -= Math.PI / 2;
      rad2 += Math.PI / 2;
      if (distance > this.miterLimit && x < 0) {
        this.outsidePoints.push({ x: point.x - Math.cos(rad1) * this.lineWidth, y: point.y - Math.sin(rad1) * this.lineWidth });
        this.outsidePoints.push({ x: point.x - Math.cos(rad2) * this.lineWidth, y: point.y - Math.sin(rad2) * this.lineWidth });
      } else {
        this.outsidePoints.push({ x: point.x + rx, y: point.y + ry });
      }
      if (distance > this.miterLimit && x >= 0) {
        this.insidePoints.push({ x: point.x + Math.cos(rad1) * this.lineWidth, y: point.y + Math.sin(rad1) * this.lineWidth });
        this.insidePoints.push({ x: point.x + Math.cos(rad2) * this.lineWidth, y: point.y + Math.sin(rad2) * this.lineWidth });
      } else {
        this.insidePoints.push({ x: point.x - rx, y: point.y - ry });
      }
    }
  }, {
    key: "getVertices",
    value: function getVertices() {
      var vertices = this.outsidePoints.concat(this.insidePoints.reverse());
      this.insidePoints.reverse();
      return vertices;
    }
  }]);

  return Line;
}();

exports.default = Line;


function getDistance(point1, point2) {
  // 三平方の定理
  var a = Math.abs(point1.x - point2.x);
  var b = Math.abs(point1.y - point2.y);
  return Math.sqrt(a * a + b * b);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,